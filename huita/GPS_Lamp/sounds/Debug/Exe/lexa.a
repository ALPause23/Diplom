;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 08.02.2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*******************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;// Declare your global variables here
;
;
;     unsigned  char nom_ok, nom_n, i,t;
;
;  unsigned  int   stdl;
; bit prer;
;
;
;
;
;
;flash char noti1[2] [12]={
;{0X5E,0XCD,0XED,0X7C,0XB3,0X5C,0XDA,0x31,0X89,0X90,0X97,0X77},
;
;{0XC4,0XC7,0XCA,0XCC,0XD0,0XD3,0XD5,0XD8,0XDA,0XDC,0XDE,0XE0}
;};
;
;flash char noti2[2][12]  ={
;{0X2E,0XE6,0X76,0X3D,0X59,0XAD,0XEC,0X18,0X44,0X4F,0X4B,0X3B},
;
;{0XE2,0XE3,0XE5,0XE6,0XE8,0XE9,0XEA,0XEC,0XED,0XEE,0XEF,0XF0}
;};
;
;flash char noti3[2][12]={
;{0X16,0XF2,0XBA,0X1E,0X2C,0XD6,0X76,0X47,0XA1,0X23,0XA5,0X1D},
;
;{0XF1,0XF1,0XF2,0XF3,0XF4,0XF4,0XF5,0XF6,0XF6,0XF7,0XF7,0XF8}
; };
;
;
;
;
;void igra ( char  nom, int  dl)
; 0000 003B {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 003C     nom_n=nom;
;PCODE: $0000000C VOL: 0
;	nom -> Y+2
;	dl -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003D     stdl=dl;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003E  TIMSK=0x82;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003F         while(nom_n>0)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0040         {
; 0000 0041         PORTB.7=1;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0042         prer=1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0043        while(prer==1) {};
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0044         PORTB.7=0;     PORTB.6=1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0045         prer=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0046         while(prer==1){};
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0047         PORTB.6=0; }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0048         }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;        void pauza (int pau) {
; 0000 004A void pauza (int pau) {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004B          PORTB.7=0; TIMSK=0x02;  stdl=pau;
;PCODE: $00000036 VOL: 0
;	pau -> Y+0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004C         while(stdl!=0){};
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004D         }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;
;
;     void melodi (unsigned  char n)
; 0000 0052          {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0053 
; 0000 0054 
; 0000 0055             switch(n)
;PCODE: $00000047 VOL: 0
;	n -> Y+0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0056           {
; 0000 0057            case 1:
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0058 
; 0000 0059 
; 0000 005A                 //vkluchenie
; 0000 005B                     nom_ok=2;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005C 
; 0000 005D                     igra(7,10);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005E                    pauza(20);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005F                    igra(7,10);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0060                     pauza(20);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0061 
; 0000 0062 
; 0000 0063                    igra(11,10);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0064                    pauza(20);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0065                    igra(11,10);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0066                    pauza(20);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0067 
; 0000 0068                    nom_ok=3;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0069                   igra(5,30);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006A                    pauza(30);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006B 
; 0000 006C 
; 0000 006D 
; 0000 006E 
; 0000 006F 
; 0000 0070 
; 0000 0071 
; 0000 0072 
; 0000 0073 
; 0000 0074 
; 0000 0075                 return;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0076 
; 0000 0077            case 2:
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0078 
; 0000 0079 
; 0000 007A                 //sputniki naideni
; 0000 007B                    nom_ok=2;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 007C 
; 0000 007D                    igra(1,15);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007E                    igra(4,15);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007F                    igra(7,30);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0080                    pauza(15);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0081                    igra(2,15);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0082                    igra(5,15);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0083                    igra(9,30);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0084                    pauza(15);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0085                      nom_ok=2;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0086                    igra(7,30);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0087                    nom_ok=3;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0088                     igra(4,50);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0089 
; 0000 008A 
; 0000 008B                 return;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 008C 
; 0000 008D                 /*
; 0000 008E 
; 0000 008F                 //vnimanie akb
; 0000 0090                  igra(1,30);
; 0000 0091                    pauza(30);
; 0000 0092                    igra(1,30);
; 0000 0093                    pauza(30);
; 0000 0094                    igra(1,30);
; 0000 0095                    pauza(30);
; 0000 0096                    igra(1,30);
; 0000 0097                     pauza(30);
; 0000 0098                    igra(11,10);
; 0000 0099                    igra(10,10);
; 0000 009A                    igra(9,10);
; 0000 009B                    igra(8,10);
; 0000 009C                    igra(7,10);
; 0000 009D                    igra(6,10);
; 0000 009E                    igra(5,10);
; 0000 009F                    igra(4,10);
; 0000 00A0                    igra(3,10);
; 0000 00A1                    igra(2,10);
; 0000 00A2                    igra(1,10);
; 0000 00A3                    pauza(10);
; 0000 00A4                    igra(1,30);
; 0000 00A5                    pauza(30);
; 0000 00A6                    igra(1,30);
; 0000 00A7                    pauza(30);
; 0000 00A8                    igra(1,30);
; 0000 00A9                    pauza(30);
; 0000 00AA                    igra(1,30);
; 0000 00AB                      pauza(30);
; 0000 00AC                     igra(11,10);
; 0000 00AD                    igra(10,10);
; 0000 00AE                    igra(9,10);
; 0000 00AF                    igra(8,10);
; 0000 00B0                    igra(7,10);
; 0000 00B1                    igra(6,10);
; 0000 00B2                    igra(5,10);
; 0000 00B3                    igra(4,10);
; 0000 00B4                    igra(3,10);
; 0000 00B5                    igra(2,10);
; 0000 00B6                    igra(1,10);
; 0000 00B7                    pauza(10);
; 0000 00B8                    igra(1,30);
; 0000 00B9                    pauza(30);
; 0000 00BA                    igra(1,30);
; 0000 00BB                    pauza(30);
; 0000 00BC                    igra(1,30);
; 0000 00BD                    pauza(30);
; 0000 00BE                    igra(1,30);
; 0000 00BF 
; 0000 00C0 
; 0000 00C1 
; 0000 00C2 
; 0000 00C3                 pauza(280);
; 0000 00C4                */
; 0000 00C5 
; 0000 00C6             case 3:
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00C7                 //vnimanie akb
; 0000 00C8                   nom_ok=2;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00C9 
; 0000 00CA                     igra(11 ,80);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00CB                    pauza(50);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CC 
; 0000 00CD                      igra(9,20);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00CE                    pauza(20);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00CF                          igra(9,20);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D0                    pauza(20);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00D1                          igra(9,20);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00D2                    pauza(20);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00D3                      igra(9,20);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00D4                    pauza(100);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00D5 
; 0000 00D6 
; 0000 00D7 
; 0000 00D8 
; 0000 00D9 
; 0000 00DA 
; 0000 00DB 
; 0000 00DC 
; 0000 00DD 
; 0000 00DE 
; 0000 00DF                    /*
; 0000 00E0                        pauza(70);
; 0000 00E1                     igra(5,20);
; 0000 00E2                    igra(5,20);
; 0000 00E3                    igra(5,20);
; 0000 00E4                    igra(2,50);
; 0000 00E5                    */
; 0000 00E6 
; 0000 00E7 
; 0000 00E8 
; 0000 00E9                 return;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00EA 
; 0000 00EB 
; 0000 00EC              case 4:
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00ED                                  nom_ok=1;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00EE                                //poterya signala
; 0000 00EF 
; 0000 00F0 
; 0000 00F1                               igra(9,20);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00F2                                igra(8,20);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F3                                 igra(7,20);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00F4                                  igra(6,20);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00F5                                   igra(5,20);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00F6                                    pauza(50);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00F7                                     igra(5,20);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00F8 
; 0000 00F9 
; 0000 00FA 
; 0000 00FB                                  return;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00FC                            /*
; 0000 00FD                        //sputniki naideni
; 0000 00FE 
; 0000 00FF 
; 0000 0100                     nom_ok=1;
; 0000 0101 
; 0000 0102                        igra(11,30);
; 0000 0103 
; 0000 0104                     nom_ok=2;
; 0000 0105 
; 0000 0106 
; 0000 0107                        igra(4,30);
; 0000 0108                        igra(7,30);
; 0000 0109                        igra(11,30);
; 0000 010A 
; 0000 010B                      nom_ok=3;
; 0000 010C 
; 0000 010D 
; 0000 010E                        igra(0,15);
; 0000 010F 
; 0000 0110                          nom_ok=2;
; 0000 0111 
; 0000 0112 
; 0000 0113                        igra(11,30);
; 0000 0114                        igra(9,15);
; 0000 0115                        igra(8,30);
; 0000 0116                        igra(9,15);
; 0000 0117                        igra(8,30);
; 0000 0118                        igra(5,15);
; 0000 0119                        igra(4,30);
; 0000 011A                        igra(5,15);
; 0000 011B 
; 0000 011C                        nom_ok=1;
; 0000 011D 
; 0000 011E                        igra(11,60);
; 0000 011F 
; 0000 0120                         pauza(400);
; 0000 0121 
; 0000 0122 
; 0000 0123                          //sputniki naideni
; 0000 0124                        igra(7,80);
; 0000 0125                          pauza(30);
; 0000 0126 
; 0000 0127                        igra(0,30);
; 0000 0128                        pauza(30);
; 0000 0129                        igra(4,30);
; 0000 012A                        pauza(30);
; 0000 012B                        igra(7,30);
; 0000 012C 
; 0000 012D                        pauza(400);
; 0000 012E 
; 0000 012F            igra(2,30);
; 0000 0130            igra(2,15);
; 0000 0131            igra(5,15);
; 0000 0132            igra(9,30);
; 0000 0133            igra(2,30);
; 0000 0134            igra(4,30);
; 0000 0135            igra(4,30);
; 0000 0136 
; 0000 0137              pauza(60);
; 0000 0138 
; 0000 0139 
; 0000 013A            igra(1,30);
; 0000 013B            igra(0,15);
; 0000 013C            igra(4,30);
; 0000 013D            igra(9,30);
; 0000 013E            igra(0,30);
; 0000 013F             igra(2,30);
; 0000 0140             igra(2,30);
; 0000 0141 
; 0000 0142 
; 0000 0143             pauza(50);
; 0000 0144 
; 0000 0145             igra(2,30);
; 0000 0146            igra(2,15);
; 0000 0147            igra(5,15);
; 0000 0148            igra(9,30);
; 0000 0149            igra(2,30);
; 0000 014A            igra(4,30);
; 0000 014B            igra(4,30);
; 0000 014C 
; 0000 014D              pauza(60);
; 0000 014E 
; 0000 014F            igra(7,30);
; 0000 0150            igra(5,30);
; 0000 0151            igra(4,30);
; 0000 0152            igra(7,30);
; 0000 0153            igra(9,60);
; 0000 0154 
; 0000 0155 
; 0000 0156          pauza(180);
; 0000 0157 
; 0000 0158 
; 0000 0159 
; 0000 015A 
; 0000 015B          //var2
; 0000 015C           nom_ok=2;
; 0000 015D           igra(4,15);
; 0000 015E 
; 0000 015F             pauza(5);
; 0000 0160 
; 0000 0161           igra(4,15);
; 0000 0162 
; 0000 0163           pauza(25);
; 0000 0164 
; 0000 0165           igra(4,15);
; 0000 0166 
; 0000 0167           pauza(25);
; 0000 0168 
; 0000 0169           igra(0,15);
; 0000 016A            pauza(5);
; 0000 016B 
; 0000 016C           igra(4,35);
; 0000 016D 
; 0000 016E            pauza(5);
; 0000 016F 
; 0000 0170           igra(7,20);
; 0000 0171 
; 0000 0172            pauza(30);
; 0000 0173 
; 0000 0174             nom_ok=1;
; 0000 0175 
; 0000 0176           igra(7,40);
; 0000 0177 
; 0000 0178            pauza(50);
; 0000 0179              */
; 0000 017A            }
;PCODE: $0000010A VOL: 0
; 0000 017B 
; 0000 017C 
; 0000 017D                }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
;
;
;#define  red_off PORTB.3=0;
;
;#define  green_off PORTB.2=0;
;
;#define  blue_off PORTD.5=0;
;
;#define  red_on PORTB.3=1;
;
;#define  green_on PORTB.2=1;
;
;#define   blue_on PORTD.5=1;
;
;
;
;
;void color_es(char red, char green, char blue,int time,char n)
; 0000 0191 
; 0000 0192   {
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0193    char k;
; 0000 0194    for(k=n;k<255;k++)
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;	red -> Y+6
;	green -> Y+5
;	blue -> Y+4
;	time -> Y+2
;	n -> Y+1
;	k -> R17
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0195 
; 0000 0196    {
; 0000 0197      if(red==1) OCR1A=k;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0198       if(green==1) OCR0A=k;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0199        if(blue==1) OCR0B=k;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 019A         delay_ms(time);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 019B         }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 019C         }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;
;
;void color_no(char red, char green, char blue,int time,char n)
; 0000 01A0 
; 0000 01A1   {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 01A2    char w;
; 0000 01A3    for(w=n;w>0;w--)
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;	red -> Y+6
;	green -> Y+5
;	blue -> Y+4
;	time -> Y+2
;	n -> Y+1
;	w -> R17
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 01A4 
; 0000 01A5    {
; 0000 01A6      if(red==1) OCR1A=w;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 01A7       if(green==1) OCR0A=w;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 01A8        if(blue==1) OCR0B=w;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 01A9         delay_ms(time);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 01AA         }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 01AB         }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;
;void color (void)
; 0000 01AE 
; 0000 01AF 
; 0000 01B0 {
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 01B1 
; 0000 01B2  TCCR0A=(1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 01B3 TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 01B4 
; 0000 01B5 
; 0000 01B6 
; 0000 01B7 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 01B8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 01B9 
; 0000 01BA 
; 0000 01BB 
; 0000 01BC 
; 0000 01BD  //TCCR1A=(1<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
; 0000 01BE //TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
; 0000 01BF  //TCCR0A=(1<<COM0A1) | (1<<COM0A0) | (1<<COM0B1) | (1<<COM0B0) | (0<<WGM01) | (1<<WGM00);
; 0000 01C0 //TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
; 0000 01C1 
; 0000 01C2    }
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;
;void sound (void)
; 0000 01C5 
; 0000 01C6  {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 01C7 
; 0000 01C8 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 01C9 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 01CA    TCCR0A=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 01CB TCCR0B=0x05;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 01CC 
; 0000 01CD 
; 0000 01CE 
; 0000 01CF }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 01D5 {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 01D6 // Place your code here
; 0000 01D7    i=5;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 01D8 }
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 01F5 {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 01F6 char status,data;
; 0000 01F7 status=UCSRA;
;PCODE: $00000187 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 01F8 data=UDR;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 01F9 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 01FA    {
; 0000 01FB    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 01FC #if RX_BUFFER_SIZE == 256
; 0000 01FD    // special case for receiver buffer size=256
; 0000 01FE    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 01FF #else
; 0000 0200    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0201    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0202       {
; 0000 0203       rx_counter=0;
;PCODE: $0000019C VOL: 0
; 0000 0204       rx_buffer_overflow=1;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0205       }
; 0000 0206 #endif
; 0000 0207    }
;PCODE: $0000019F VOL: 0
; 0000 0208 
; 0000 0209    switch(data)
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 020A    {
; 0000 020B      case 'v': i=1; break;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 020C      case 's': i=2; break;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 020D       case 'b': i=3; break;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 020E        case 'n': i=4; break;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 020F 
; 0000 0210        }
;PCODE: $000001BA VOL: 0
; 0000 0211 }
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0218 {
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0219 char data;
; 0000 021A while (rx_counter==0);
;PCODE: $000001C1 VOL: 0
;	data -> R17
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 021B data=rx_buffer[rx_rd_index++];
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 021C #if RX_BUFFER_SIZE != 256
; 0000 021D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 021E #endif
; 0000 021F #asm("cli")
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
	cli
;PCODE: $000001D1 VOL: 0
; 0000 0220 --rx_counter;
;PCODE: $000001D2 VOL: 0
; 0000 0221 #asm("sei")
;PCODE: $000001D3 VOL: 0
	sei
;PCODE: $000001D4 VOL: 0
; 0000 0222 return data;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0223 }
;PCODE: $000001D8 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 022C {
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 022D // Place your code here
; 0000 022E  TCNT0=177;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 022F stdl--;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0230 if(stdl==0)
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0231          nom_n=0;
;PCODE: $000001E2 VOL: 0
; 0000 0232 }
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0236 {
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0237 // Place your code here
; 0000 0238 
; 0000 0239 
; 0000 023A  switch(nom_ok)
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 023B {
; 0000 023C 
; 0000 023D case 1 :
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 023E 
; 0000 023F TCNT1L=noti1[0][nom_n];TCNT1H=noti1[1][nom_n]; break;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0240 
; 0000 0241  case 2 :
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0242 
; 0000 0243 TCNT1L=noti2[0][nom_n];TCNT1H=noti2[1][nom_n]; break;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0244 
; 0000 0245  case 3 :
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0246 
; 0000 0247 TCNT1L=noti3[0][nom_n];TCNT1H=noti3[1][nom_n]; break;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0248  default:
;PCODE: $0000021A VOL: 0
; 0000 0249     };
;PCODE: $0000021B VOL: 0
; 0000 024A prer=0;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 024B 
; 0000 024C 
; 0000 024D 
; 0000 024E }
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;
;void main(void)
; 0000 0251 {
;PCODE: $00000221 VOL: 0
; 0000 0252 // Declare your local variables here
; 0000 0253 
; 0000 0254 // Crystal Oscillator division factor: 1
; 0000 0255 #pragma optsize-
; 0000 0256 CLKPR=(1<<CLKPCE);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0257 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0258 #ifdef _OPTIMIZE_SIZE_
; 0000 0259 #pragma optsize+
; 0000 025A #endif
; 0000 025B 
; 0000 025C // Input/Output Ports initialization
; 0000 025D // Port A initialization
; 0000 025E // Function: Bit2=In Bit1=In Bit0=In
; 0000 025F DDRA=(0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0260 // State: Bit2=T Bit1=T Bit0=T
; 0000 0261 PORTA=(0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0262 
; 0000 0263 // Port B initialization
; 0000 0264 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0265 DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0266 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0267 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0268 
; 0000 0269 // Port D initialization
; 0000 026A // Function: Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=In
; 0000 026B DDRD=(1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 026C // State: Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=T
; 0000 026D PORTD=(0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 026E 
; 0000 026F 
; 0000 0270 
; 0000 0271 // Timer/Counter 0 initialization
; 0000 0272 // Clock source: System Clock
; 0000 0273 // Clock value: 7,813 kHz
; 0000 0274 // Mode: Normal top=0xFF
; 0000 0275 // OC0A output: Disconnected
; 0000 0276 // OC0B output: Disconnected
; 0000 0277 TCCR0A=0x00;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0278 TCCR0B=0x05;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0279 TCNT0=0x00;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 027A OCR0A=0x00;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 027B OCR0B=0x00;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 027C 
; 0000 027D 
; 0000 027E 
; 0000 027F 
; 0000 0280 // Timer/Counter 1 initialization
; 0000 0281 // Clock source: System Clock
; 0000 0282 // Clock value: Timer1 Stopped
; 0000 0283 // Mode: Normal top=0xFFFF
; 0000 0284 // OC1A output: Disconnected
; 0000 0285 // OC1B output: Disconnected
; 0000 0286 // Noise Canceler: Off
; 0000 0287 // Input Capture on Falling Edge
; 0000 0288 // Timer1 Overflow Interrupt: On
; 0000 0289 // Input Capture Interrupt: Off
; 0000 028A // Compare A Match Interrupt: Off
; 0000 028B // Compare B Match Interrupt: Off
; 0000 028C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 028D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 028E TCNT1H=0x00;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 028F TCNT1L=0x00;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0290 ICR1H=0x00;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0291 ICR1L=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0292 OCR1AH=0x00;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0293 OCR1AL=0x00;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0294 OCR1BH=0x00;
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0295 OCR1BL=0x00;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0296 
; 0000 0297 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0298 TIMSK=(0<<TOIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<ICIE1) | (0<<OCIE0B) | (0<<TOIE0) | (0<<OCIE0A);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0299 
; 0000 029A // External Interrupt(s) initialization
; 0000 029B // INT0: On
; 0000 029C // INT0 Mode: Rising Edge
; 0000 029D // INT1: Off
; 0000 029E // Interrupt on any change on pins PCINT0-7: Off
; 0000 029F GIMSK=(0<<INT1) | (1<<INT0) | (0<<PCIE);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 02A0 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 02A1 EIFR=(0<<INTF1) | (1<<INTF0) | (0<<PCIF);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 02A2 
; 0000 02A3 // USI initialization
; 0000 02A4 // Mode: Disabled
; 0000 02A5 // Clock source: Register & Counter=no clk.
; 0000 02A6 // USI Counter Overflow Interrupt: Off
; 0000 02A7 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 02A8 
; 0000 02A9 // USART initialization
; 0000 02AA // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 02AB // USART Receiver: On
; 0000 02AC // USART Transmitter: Off
; 0000 02AD // USART Mode: Asynchronous
; 0000 02AE // USART Baud Rate: 9600
; 0000 02AF UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 02B0 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 02B1 UCSRC=(0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 02B2 UBRRH=0x00;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 02B3 UBRRL=0x33;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 02B4 
; 0000 02B5 // Analog Comparator initialization
; 0000 02B6 // Analog Comparator: Off
; 0000 02B7 // The Analog Comparator's positive input is
; 0000 02B8 // connected to the AIN0 pin
; 0000 02B9 // The Analog Comparator's negative input is
; 0000 02BA // connected to the AIN1 pin
; 0000 02BB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 02BC // Digital input buffer on AIN0: On
; 0000 02BD // Digital input buffer on AIN1: On
; 0000 02BE DIDR=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 02BF 
; 0000 02C0 
; 0000 02C1 // Global enable interrupts
; 0000 02C2 
; 0000 02C3 #asm("sei")
;PCODE: $00000268 VOL: 0
	sei
;PCODE: $00000269 VOL: 0
; 0000 02C4               delay_ms(1800);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 02C5   melodi(1);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 02C6      TIMSK=0;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 02C7           PORTB.7=0;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 02C8       color();
;PCODE: $00000272 VOL: 0
; 0000 02C9  color_es(1,0,0,3,0);
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 02CA 
; 0000 02CB color_es(0,0,1,3,0);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 02CC 
; 0000 02CD color_es(0,1,0,3,0);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 02CE 
; 0000 02CF color_no(1,1,1,2,255);
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 02D0 
; 0000 02D1      blue_off
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 02D2 //color_es(1,0,0,10,0);
; 0000 02D3 
; 0000 02D4 
; 0000 02D5 
; 0000 02D6 
; 0000 02D7     color_es(1,1,0,1,0);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 02D8 
; 0000 02D9       sound();
;PCODE: $000002A7 VOL: 0
; 0000 02DA 
; 0000 02DB     red_on
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 02DC    green_on
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 02DD    blue_off
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 02DE 
; 0000 02DF 
; 0000 02E0 
; 0000 02E1 
; 0000 02E2 while (1)
;PCODE: $000002AE VOL: 0
; 0000 02E3       {
; 0000 02E4 
; 0000 02E5    while(i==0){};
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 02E6 
; 0000 02E7       switch(i)
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 02E8    {
; 0000 02E9 
; 0000 02EA  //   case 1:
; 0000 02EB 
; 0000 02EC     case 5:
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 02ED 
; 0000 02EE 
; 0000 02EF     melodi(1);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 02F0      TIMSK=0;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 02F1           PORTB.7=0;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 02F2       color();
;PCODE: $000002BE VOL: 0
; 0000 02F3  color_es(1,0,0,3,0);
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 02F4 
; 0000 02F5 color_es(0,0,1,3,0);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 02F6 
; 0000 02F7 color_es(0,1,0,3,0);
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 02F8 
; 0000 02F9 color_no(1,1,1,2,255);
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 02FA 
; 0000 02FB      blue_off
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 02FC //color_es(1,0,0,10,0);
; 0000 02FD 
; 0000 02FE 
; 0000 02FF 
; 0000 0300 
; 0000 0301     color_es(1,1,0,10,0);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0302 
; 0000 0303       sound();
;PCODE: $000002F3 VOL: 0
; 0000 0304 
; 0000 0305     red_on
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0306    green_on
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0307    blue_off
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 0308 
; 0000 0309 
; 0000 030A 
; 0000 030B 
; 0000 030C 
; 0000 030D 
; 0000 030E          if(i==5)
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 030F 
; 0000 0310          {
; 0000 0311 
; 0000 0312             i=6;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 0313         delay_ms(500);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0314          continue;
;PCODE: $00000301 VOL: 0
; 0000 0315 
; 0000 0316          }
; 0000 0317 
; 0000 0318      break;
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0319 
; 0000 031A      case 2: case 6:
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 031B 
; 0000 031C 
; 0000 031D          melodi(2);
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 031E           TIMSK=0;
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 031F             PORTB.7=0;
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 0320           red_off  green_off
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 0321 
; 0000 0322        for(t=0;t<4;t++)
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0323        {
; 0000 0324          green_on delay_ms(300);green_off
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0325                   delay_ms(300);
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 0326                   }
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 0327                delay_ms(150);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0328 
; 0000 0329          color();
;PCODE: $0000032C VOL: 0
; 0000 032A            color_es(1,1,0,10,0);
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 032B 
; 0000 032C       sound();
;PCODE: $00000337 VOL: 0
; 0000 032D 
; 0000 032E     red_on
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 032F    green_on
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 0330 
; 0000 0331           if(i==6)
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0332           {
; 0000 0333           i=7;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 0334           delay_ms(500);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0335           continue;
;PCODE: $00000343 VOL: 0
; 0000 0336                 }
; 0000 0337     break;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 0338 
; 0000 0339 
; 0000 033A 
; 0000 033B      case 3: case 7:
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 033C 
; 0000 033D           melodi(3);
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 033E            TIMSK=0;
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 033F           PORTB.7=0;
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0340         red_off  green_off
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 0341        for(t=0;t<4;t++)
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0342        {
; 0000 0343          red_on delay_ms(300);red_off
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 0344                   delay_ms(300);
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0345                   }
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 0346 
; 0000 0347              delay_ms(150);
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 0348          color();
;PCODE: $0000036E VOL: 0
; 0000 0349            color_es(1,1,0,10,0);
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 034A 
; 0000 034B       sound();
;PCODE: $00000379 VOL: 0
; 0000 034C 
; 0000 034D     red_on
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 034E    green_on
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 034F 
; 0000 0350           if(i==7)
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 0351           {
; 0000 0352           i=8;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 0353           delay_ms(500);
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 0354           continue;
;PCODE: $00000385 VOL: 0
; 0000 0355                 }
; 0000 0356       break;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0357 
; 0000 0358 
; 0000 0359        case 4: case 8:
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 035A 
; 0000 035B 
; 0000 035C           melodi(4);
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 035D            TIMSK=0;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 035E           PORTB.7=0;
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 035F          red_off  green_off
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 0360 
; 0000 0361        for(t=0;t<4;t++)
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0000 0362        {
; 0000 0363          blue_on delay_ms(300);blue_off
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 0364                  delay_ms(300);
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0365                   }
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 0366 
; 0000 0367           delay_ms(150);
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0368          color();
;PCODE: $000003B0 VOL: 0
; 0000 0369            color_es(1,1,0,10,0);
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 036A 
; 0000 036B       sound();
;PCODE: $000003BB VOL: 0
; 0000 036C       red_on
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 036D    green_on
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 036E 
; 0000 036F     break;
;PCODE: $000003C0 VOL: 0
; 0000 0370 
; 0000 0371 
; 0000 0372 
; 0000 0373        }
;PCODE: $000003C1 VOL: 0
; 0000 0374 
; 0000 0375 
; 0000 0376            i=0;
;PCODE: $000003C2 VOL: 0
; 0000 0377 
; 0000 0378 
; 0000 0379 
; 0000 037A 
; 0000 037B         rx_wr_index=0;
;PCODE: $000003C3 VOL: 0
; 0000 037C 
; 0000 037D 
; 0000 037E 
; 0000 037F 
; 0000 0380 
; 0000 0381 
; 0000 0382 
; 0000 0383 
; 0000 0384 
; 0000 0385 
; 0000 0386 
; 0000 0387       // Place your code here
; 0000 0388 
; 0000 0389       }
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 038A }
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
