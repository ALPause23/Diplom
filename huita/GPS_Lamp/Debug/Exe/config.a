;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27.06.2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;
;#include <stdlib.h>
;
;// 1 Wire Bus interface functions
;#include <1wire.h>
;
;// DS1820 Temperature Sensor functions
;#include <ds1820.h>
;
;
;#include <ds1307.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define adc_on ADCSRA|=0x80
;
;#define adc_off ADCSRA &=(~0x80)
;
;#define min_u 115
;
;#define max_u 148
;
;
;// Declare your global variables here
;
;unsigned char work_gps;
;unsigned char i;
;
;unsigned char temp_msb;
;unsigned char temp_lsb;
;unsigned char ed_speed;
;unsigned char deset_speed;
;unsigned char soten_speed;
;
;
;
;unsigned char sum_hours;
;
;unsigned char j;
;
;unsigned char ed_min_clock;
;unsigned char decet_min_clock;
;unsigned char ed_hours_clock;
;unsigned char decet_Hours_clock;
;
;unsigned char h;
;unsigned char m;
;unsigned char s;
;
;unsigned char st;
;
;unsigned char st_v;
;
;unsigned char st_po;
;unsigned int  err;
;
;unsigned char ;
;unsigned char counter;
;unsigned char work;
;unsigned char test;
;unsigned char es_gps;
;
;unsigned char cnt_rem;
;unsigned char cnt_c;
;unsigned char error;
;
;unsigned char kvadrat;
;//unsigned char kvad;
;//unsigned char kv;
;//unsigned char wrx;
;
;unsigned char decet_sek_clock;
;unsigned char alarm_u;
;   unsigned char c;
;   unsigned char t;
;     unsigned char s;
; unsigned int  metr;
;    unsigned char ts;
;     unsigned char tm;
;
;       unsigned char st_s;
;    unsigned char r;
;      unsigned char met;
;
;  unsigned int adc_dataw;
;  unsigned int adc_data;
;  unsigned int adc_datawi;
;   unsigned char cout_in;
;
;
;
; // unsigned int  crrc;
; //   unsigned int  crrw;
;
;
;
;
;float  copy;
;float  wcnt_rem;
;float wcnt_c;
;
;
;bit flag;
;
;unsigned char lcd_buf[16];
;
;unsigned char speed_array[10];
;
;unsigned char speed[]={0x00,0x01,0x02,0x03,0x40,0x41,0x42,0x43,0x80,0x81};

	.DSEG
;
;
;
;
; /*
;
;
;
;
;
; int calc_NMEA_Checksum( char *buf, int cnt )
; { char Character;
;int Checksum = 0;
; int i; // loop counter //foreach(char Character in sentence)
;for (i=0;i<cnt;++i) {
;Character = buf[i];
;switch(Character)
;{case'$':
;// Ignore the dollar sign
;break;
;case '*': // Stop processing before the asterisk
; i = cnt;
;continue;
;default: // Is this the first value for the checksum?
;if (Checksum == 0) {
;// Yes. Set the checksum to the value
; Checksum = Character; } else
;{
;// No. XOR the checksum with this character value
; Checksum = Checksum ^ Character; }
;break; }
; } // Return the checksum
;return (Checksum);
;} //
;
;
;
;  */
;
;
;
;  #define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 100
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00D4 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 00D5 char status,data;
; 0000 00D6 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 00D7 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 00D8 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 00D9    {
; 0000 00DA    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 00DB #if RX_BUFFER_SIZE == 255
; 0000 00DC    // special case for receiver buffer size=256
; 0000 00DD    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 00DE #else
; 0000 00DF    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 00E0    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 00E1       {
; 0000 00E2       rx_counter=0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 00E3       rx_buffer_overflow=1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00E4       }
; 0000 00E5 #endif
; 0000 00E6    }
;PCODE: $0000002F VOL: 0
; 0000 00E7 
; 0000 00E8 
; 0000 00E9 
; 0000 00EA    if( met>0)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 00EB         {
; 0000 00EC         ++met;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 00ED       if( met==3)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00EE       {
; 0000 00EF        work_gps=1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00F0                   return;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 00F1                   }
; 0000 00F2                   }
;PCODE: $0000003F VOL: 0
; 0000 00F3    if (data=='*')
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00F4 
; 0000 00F5        met=1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00F6 
; 0000 00F7 
; 0000 00F8     }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0100 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0101 char data;
; 0000 0102 while (rx_counter==0);
;PCODE: $0000004D VOL: 0
;	data -> R17
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0103 data=rx_buffer[rx_rd_index++];
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0104 #if RX_BUFFER_SIZE != 256
; 0000 0105 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0106 #endif
; 0000 0107 #asm("cli")
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
	cli
;PCODE: $00000062 VOL: 0
; 0000 0108 --rx_counter;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0109 #asm("sei")
;PCODE: $00000066 VOL: 0
	sei
;PCODE: $00000067 VOL: 0
; 0000 010A return data;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 010B }
;PCODE: $0000006B VOL: 0
;#pragma used-
;#endif
;
;
;   #include <string.h>
;
;
;  void reset (void)
; 0000 0114      {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0115 
; 0000 0116 
; 0000 0117      // #asm("sei")
; 0000 0118     // TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B)
; 0000 0119  //    | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
; 0000 011A       work_gps=0;
;PCODE: $0000006E VOL: 0
; 0000 011B              rx_wr_index=0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 011C        //   kvad=0;
; 0000 011D          //  wrx=0;
; 0000 011E          memset(rx_buffer,0,RX_BUFFER_SIZE);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 011F 
; 0000 0120                           }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;      void lcd_d (void)
; 0000 0123   {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0124     if (rx_buffer [i+1]=='0')
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0125                lcd_putchar(rx_buffer [i+2]);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0126                      else
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0127                {
; 0000 0128              lcd_putchar(rx_buffer [i+1]);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0129                lcd_putchar(rx_buffer [i+2]);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 012A                        }
;PCODE: $00000097 VOL: 0
; 0000 012B          // lcd_puts(lcd_buf);
; 0000 012C             lcd_putchar(0X20);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 012D           }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;
;
;
;
;
;
;  void tim(void)
; 0000 0136   {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0137 
; 0000 0138       ++st_s;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0139       if(st_s==2 || st_s==11)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 013A       {
; 0000 013B 
; 0000 013C         //   UCSRB &=~(1<<RXCIE);
; 0000 013D 
; 0000 013E 
; 0000 013F       rtc_get_time(&h,&m,&s);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0140          if (s==0 || st_s==11)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0141 
; 0000 0142           {
; 0000 0143 
; 0000 0144     decet_Hours_clock=h/10;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0145     ed_hours_clock=h%10;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0146     decet_min_clock=m/10;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0147     ed_min_clock=m%10;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0148                   }
; 0000 0149 
; 0000 014A 
; 0000 014B 
; 0000 014C           st_s=0;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 014D           //  UCSRB|=(1<<RXCIE);
; 0000 014E             //  reset();
; 0000 014F 
; 0000 0150             }
; 0000 0151 
; 0000 0152     if(es_gps==0 && test==0)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0153 
; 0000 0154     {
; 0000 0155 
; 0000 0156      switch(kvadrat)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0157      {
; 0000 0158        case 0:
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0159                flag=1;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 015A    while(flag==1){}
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 015B         lcd_gotoxy(0,0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 015C lcd_puts(" ");
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 015D    lcd_gotoxy(6,0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 015E lcd_puts(" ");
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 015F 
; 0000 0160 
; 0000 0161            kvadrat++;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0162               break;
;PCODE: $000000F7 VOL: 0
; 0000 0163          case 1:
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0164 
; 0000 0165 
; 0000 0166 
; 0000 0167 
; 0000 0168                flag=1;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0169    while(flag==1){}
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 016A         lcd_gotoxy(0,0);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 016B lcd_puts(">");
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 016C    lcd_gotoxy(6,0);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 016D lcd_puts("<");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 016E        kvadrat=0;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 016F 
; 0000 0170 
; 0000 0171     if(++ts==60)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0172     {
; 0000 0173     ts=0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0174      ++tm;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0175     flag=1;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0176    while(flag==1){}
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0177        lcd_gotoxy(2,0);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0178       if(tm<10)
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0179            lcd_gotoxy(2,0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 017A            else
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 017B             lcd_gotoxy(1,0);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 017C 
; 0000 017D             itoa(tm,lcd_buf);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 017E                  lcd_puts(lcd_buf);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 017F    flag=1;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0180    while(flag==1){}             }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0181       lcd_gotoxy(4,0);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0182       if(ts<10)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0183          lcd_puts("0");
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0184 
; 0000 0185             itoa(ts,lcd_buf);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0186                  lcd_puts(lcd_buf);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0187 
; 0000 0188 
; 0000 0189 
; 0000 018A              break;
;PCODE: $0000015C VOL: 0
; 0000 018B 
; 0000 018C 
; 0000 018D 
; 0000 018E 
; 0000 018F                }
;PCODE: $0000015D VOL: 0
; 0000 0190                }
; 0000 0191 
; 0000 0192    if(alarm_u>0)
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0193      {
; 0000 0194 
; 0000 0195 
; 0000 0196      switch(c)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0197     {
; 0000 0198     case 0:
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0199               flag=1;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 019A    while(flag==1){}
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 019B   lcd_gotoxy(12,1);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 019C lcd_puts("    ");
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 019D 
; 0000 019E  c++;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 019F break;
;PCODE: $00000179 VOL: 0
; 0000 01A0 
; 0000 01A1  case 1:
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 01A2 
; 0000 01A3 
; 0000 01A4 
; 0000 01A5    ftoa((float)adc_datawi/10,1,lcd_buf);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 01A6                       flag=1;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 01A7    while(flag==1){}
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01A8          lcd_gotoxy(12,1);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 01A9       lcd_puts(lcd_buf); c=0;;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 01AA 
; 0000 01AB    break;
;PCODE: $00000198 VOL: 0
; 0000 01AC       }
;PCODE: $00000199 VOL: 0
; 0000 01AD 
; 0000 01AE       }
; 0000 01AF 
; 0000 01B0    }
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0

	.DSEG
_0x20:
	.BYTE 0xF
;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 01B6 {

	.CSEG
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 01B7 // Place your code here
; 0000 01B8    work=1;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 01B9 
; 0000 01BA 
; 0000 01BB       }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 01C2 {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 01C3 // Reinitialize Timer 0 value
; 0000 01C4 //TCNT0=0x64;
; 0000 01C5 // Place your code here
; 0000 01C6 
; 0000 01C7         PORTA=0;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 01C8      counter++;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 01C9 
; 0000 01CA 
; 0000 01CB 
; 0000 01CC 
; 0000 01CD switch (counter)
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 01CE {
; 0000 01CF 
; 0000 01D0  case 1:  if (soten_speed==0 && test==0)return;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 01D1 
; 0000 01D2  PORTA.1=1; PORTC=speed[soten_speed];
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 01D3      break;
;PCODE: $000001C2 VOL: 0
; 0000 01D4  case 2:  if (deset_speed==0 && soten_speed==0 && test==0)return;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 01D5 
; 0000 01D6  PORTA.2=1; PORTC=speed[deset_speed];
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 01D7      break;
;PCODE: $000001DB VOL: 0
; 0000 01D8  case 3:  if(test==0 && es_gps==0) return;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 01D9 
; 0000 01DA  PORTA.3=1; PORTC=speed[ed_speed];
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 01DB      break;
;PCODE: $000001F3 VOL: 0
; 0000 01DC  case 4: if(test==0 && decet_Hours_clock ==0)return;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 01DD      PORTA.4=1; PORTC=speed[decet_Hours_clock];
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 01DE      break;
;PCODE: $0000020B VOL: 0
; 0000 01DF  case 5:
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 01E0  PORTA.5=1; PORTC=speed[ed_hours_clock];
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 01E1      break;
;PCODE: $00000216 VOL: 0
; 0000 01E2  case 6:
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01E3  PORTA.6=1; PORTC=speed[decet_min_clock];
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 01E4      break;
;PCODE: $00000221 VOL: 0
; 0000 01E5  case 7: counter=0;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 01E6 
; 0000 01E7  PORTA.7=1; PORTC=speed[ed_min_clock];
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01E8 
; 0000 01E9      break;
;PCODE: $0000022E VOL: 0
; 0000 01EA         }
;PCODE: $0000022F VOL: 0
; 0000 01EB 
; 0000 01EC 
; 0000 01ED   flag=0;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01EE 
; 0000 01EF }
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;
;
;
;
;
;
;
;
;
;// Voltage Reference: Int., cap. on AREF
;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 01FE {
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01FF 
; 0000 0200 // Read the AD conversion result
; 0000 0201 adc_data=ADCW;
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0202 // Place your code here
; 0000 0203     work=3;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0204 
; 0000 0205 
; 0000 0206 }
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;
;void main(void)
; 0000 0209 {
;PCODE: $0000023F VOL: 0
; 0000 020A // Declare your local variables here
; 0000 020B 
; 0000 020C // Input/Output Ports initialization
; 0000 020D // Port A initialization
; 0000 020E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=In
; 0000 020F DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0210 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=T
; 0000 0211 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0212 
; 0000 0213 // Port B initialization
; 0000 0214 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0215 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0216 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0217 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0218 
; 0000 0219 // Port C initialization
; 0000 021A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 021B DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 021C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 021D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 021E 
; 0000 021F // Port D initialization
; 0000 0220 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0221 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0222 // State: Bit7=0 Bit6=T Bit5=P Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0223 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0224 
; 0000 0225 // Timer/Counter 0 initialization
; 0000 0226 // Clock source: System Clock
; 0000 0227 // Clock value: Timer 0 Stopped
; 0000 0228 // Mode: Normal top=0xFF
; 0000 0229 // OC0 output: Disconnected
; 0000 022A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 022B TCNT0=0x64;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 022C OCR0=0x00;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 022D 
; 0000 022E // Timer/Counter 1 initialization
; 0000 022F // Clock source: System Clock
; 0000 0230 // Clock value: 31,250 kHz
; 0000 0231 // Mode: Normal top=0xFFFF
; 0000 0232 // OC1A output: Disconnected
; 0000 0233 // OC1B output: Disconnected
; 0000 0234 // Noise Canceler: Off
; 0000 0235 // Input Capture on Falling Edge
; 0000 0236 // Timer Period: 2 s
; 0000 0237 // Timer1 Overflow Interrupt: On
; 0000 0238 // Input Capture Interrupt: Off
; 0000 0239 // Compare A Match Interrupt: Off
; 0000 023A // Compare B Match Interrupt: Off
; 0000 023B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 023C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 023D TCNT1H=0x00;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 023E TCNT1L=0x00;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 023F ICR1H=0x00;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0240 ICR1L=0x00;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0241 OCR1AH=0x00;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0242 OCR1AL=0x00;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0243 OCR1BH=0x00;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0244 OCR1BL=0x00;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0245 
; 0000 0246 // Timer/Counter 2 initialization
; 0000 0247 // Clock source: System Clock
; 0000 0248 // Clock value: Timer2 Stopped
; 0000 0249 // Mode: Normal top=0xFF
; 0000 024A // OC2 output: Disconnected
; 0000 024B ASSR=0<<AS2;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 024C TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 024D TCNT2=0x00;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 024E OCR2=0x00;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 024F 
; 0000 0250 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0251 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0252 
; 0000 0253 
; 0000 0254 // External Interrupt(s) initialization
; 0000 0255 // INT0: On
; 0000 0256 // INT0 Mode: Any change
; 0000 0257 // INT1: Off
; 0000 0258 // INT2: Off
; 0000 0259 GICR|=(0<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 025A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 025B MCUCSR=(0<<ISC2);
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 025C GIFR=(0<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 025D 
; 0000 025E // USART initialization
; 0000 025F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0260 // USART Receiver: On
; 0000 0261 // USART Transmitter: On
; 0000 0262 // USART Mode: Asynchronous
; 0000 0263 // USART Baud Rate: 9600
; 0000 0264 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0265 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0266 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0267 UBRRH=0x00;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0268 UBRRL=0x33;
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0269 
; 0000 026A // Analog Comparator initialization
; 0000 026B // Analog Comparator: Off
; 0000 026C // The Analog Comparator's positive input is
; 0000 026D // connected to the AIN0 pin
; 0000 026E // The Analog Comparator's negative input is
; 0000 026F // connected to the AIN1 pin
; 0000 0270 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0271 
; 0000 0272 // ADC initialization
; 0000 0273 // ADC Clock frequency: 250,000 kHz
; 0000 0274 // ADC Voltage Reference: Int., cap. on AREF
; 0000 0275 // ADC Auto Trigger Source: Free Running
; 0000 0276 //ADMUX=0;
; 0000 0277 //ADCSRA=(0<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
; 0000 0278 //SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
; 0000 0279 
; 0000 027A    // ADC initialization
; 0000 027B // ADC Clock frequency: 125,000 kHz
; 0000 027C // ADC Voltage Reference: AREF pin
; 0000 027D // ADC Auto Trigger Source: Timer0 Overflow
; 0000 027E ADMUX=0xC0;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 027F ADCSRA=(0<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE)
; 0000 0280  | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0281 //ADCSRA=0x2E;
; 0000 0282 SFIOR&=0x1F;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0283 SFIOR|=0x80;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 0284 
; 0000 0285 // SPI initialization
; 0000 0286 // SPI disabled
; 0000 0287 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<1) | (0<<0);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0288 
; 0000 0289 // TWI initialization
; 0000 028A // TWI disabled
; 0000 028B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 028C 
; 0000 028D // Bit-Banged I2C Bus initialization
; 0000 028E // I2C Port: PORTD
; 0000 028F // I2C SDA bit: 1
; 0000 0290 // I2C SCL bit: 3
; 0000 0291 // Bit Rate: 100 kHz
; 0000 0292 // Note: I2C settings are specified in the
; 0000 0293 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0294 i2c_init();
;PCODE: $00000297 VOL: 0
; 0000 0295 
; 0000 0296 // 1 Wire Bus initialization
; 0000 0297 // 1 Wire Data port: PORTD
; 0000 0298 // 1 Wire Data bit: 5
; 0000 0299 // Note: 1 Wire port settings are specified in the
; 0000 029A // Project|Configure|C Compiler|Libraries|1 Wire menu.
; 0000 029B w1_init();
;PCODE: $00000298 VOL: 0
; 0000 029C 
; 0000 029D 
; 0000 029E // DS1307 Real Time Clock initialization
; 0000 029F // Square wave output on pin SQW/OUT: On
; 0000 02A0 // Square wave frequency: 1Hz
; 0000 02A1 rtc_init(0,1,0);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 02A2 
; 0000 02A3 // Alphanumeric LCD initialization
; 0000 02A4 // Connections are specified in the
; 0000 02A5 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 02A6 // RS - PORTB Bit 0
; 0000 02A7 // RD - PORTB Bit 1
; 0000 02A8 // EN - PORTB Bit 2
; 0000 02A9 // D4 - PORTB Bit 3
; 0000 02AA // D5 - PORTB Bit 4
; 0000 02AB // D6 - PORTB Bit 5
; 0000 02AC // D7 - PORTB Bit 6
; 0000 02AD // Characters/line: 8
; 0000 02AE lcd_init(16);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 02AF 
; 0000 02B0 // Global enable interrupts
; 0000 02B1 
; 0000 02B2 
; 0000 02B3   test=1;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 02B4 
; 0000 02B5  lcd_gotoxy(0,0);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 02B6 lcd_puts("GPS info system");
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 02B7 
; 0000 02B8 lcd_gotoxy(0,1);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 02B9 lcd_puts("Ver. 18.04.2019");
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 02BA    delay_ms(1000);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 02BB   lcd_clear();
;PCODE: $000002B3 VOL: 0
; 0000 02BC 
; 0000 02BD 
; 0000 02BE 
; 0000 02BF 
; 0000 02C0  lcd_gotoxy(1,0);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 02C1 lcd_puts("M8030 NEO-M8N");
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 02C2 
; 0000 02C3 
; 0000 02C4 lcd_gotoxy(1,1);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 02C5 lcd_puts("FLASH  BN-280");
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 02C6 
; 0000 02C7 
; 0000 02C8  delay_ms(1000);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 02C9   lcd_clear();
;PCODE: $000002C4 VOL: 0
; 0000 02CA 
; 0000 02CB 
; 0000 02CC 
; 0000 02CD 
; 0000 02CE 
; 0000 02CF 
; 0000 02D0 lcd_gotoxy(3,0);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 02D1 lcd_puts("PSA  Groupe");
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 02D2 
; 0000 02D3   lcd_gotoxy(3,1);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 02D4 lcd_puts("PEUGEOT 307");
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 02D5 
; 0000 02D6 
; 0000 02D7 
; 0000 02D8 
; 0000 02D9 
; 0000 02DA 
; 0000 02DB 
; 0000 02DC 
; 0000 02DD 
; 0000 02DE     if(PIND.4==0)
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 02DF 
; 0000 02E0              rtc_set_time(9,0,0);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 02E1 
; 0000 02E2     #asm("sei")
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
	sei
;PCODE: $000002DE VOL: 0
; 0000 02E3 
; 0000 02E4 
; 0000 02E5          // zvuk();
; 0000 02E6       putchar('v');
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 02E7 
; 0000 02E8   //    PORTA=0;
; 0000 02E9 
; 0000 02EA    //   #asm("cli")
; 0000 02EB 
; 0000 02EC 
; 0000 02ED 
; 0000 02EE 
; 0000 02EF              for(j=0;j<10;j++)
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 02F0           {
; 0000 02F1 
; 0000 02F2           deset_speed=j;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 02F3           ed_speed=j;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 02F4          if(j<2) soten_speed=j;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 02F5          if(j<3) decet_Hours_clock=j;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 02F6           if(j<6)decet_min_clock=j;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 02F7             ed_min_clock=j;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 02F8 
; 0000 02F9           ed_hours_clock=j;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 02FA            delay_ms(200);
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 02FB 
; 0000 02FC      }
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 02FD 
; 0000 02FE 
; 0000 02FF 
; 0000 0300           delay_ms(500);
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0301 
; 0000 0302 
; 0000 0303              test=0;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0304 
; 0000 0305         soten_speed = 0;
;PCODE: $0000030D VOL: 0
; 0000 0306             deset_speed= 0;
;PCODE: $0000030E VOL: 0
; 0000 0307               ed_speed= 0;
;PCODE: $0000030F VOL: 0
; 0000 0308 
; 0000 0309 
; 0000 030A 
; 0000 030B       lcd_clear();
;PCODE: $00000310 VOL: 0
; 0000 030C 
; 0000 030D 
; 0000 030E 
; 0000 030F      lcd_gotoxy(3,0);
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0310 
; 0000 0311         lcd_puts(":");
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 0312 
; 0000 0313         lcd_gotoxy(10,0);
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 0314 
; 0000 0315         lcd_puts("S=");
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0316 
; 0000 0317 
; 0000 0318        lcd_gotoxy(0,1);
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0319 
; 0000 031A       lcd_puts("t=");
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 031B 
; 0000 031C         lcd_gotoxy(10,1);
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 031D       lcd_puts("V=");
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 031E 
; 0000 031F 
; 0000 0320             ADCSRA|= (1<<ADIE);
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0321 
; 0000 0322 
; 0000 0323    GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0324    GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 0325 
; 0000 0326             st_s=10;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0327 
; 0000 0328      /*
; 0000 0329 
; 0000 032A 
; 0000 032B    ftoa(copy/10,1,lcd_buf);
; 0000 032C 
; 0000 032D 
; 0000 032E          soten_speed = 0;
; 0000 032F             deset_speed= 0;
; 0000 0330               ed_speed= 0;
; 0000 0331 
; 0000 0332  if(copy >0)
; 0000 0333  {
; 0000 0334    // strcpy( lcd_buf1, lcd_buf);
; 0000 0335 
; 0000 0336  for(i=9;i<255;i--)
; 0000 0337 
; 0000 0338     lcd_buf[i+1]= lcd_buf[i];
; 0000 0339 
; 0000 033A 
; 0000 033B   lcd_buf[0]='+';
; 0000 033C 
; 0000 033D       }
; 0000 033E 
; 0000 033F   lcd_puts(lcd_buf);
; 0000 0340 
; 0000 0341      */
; 0000 0342 
; 0000 0343     //   #asm("sei")
; 0000 0344 
; 0000 0345 while (1)
;PCODE: $00000336 VOL: 0
; 0000 0346       {
; 0000 0347       // Place your code here
; 0000 0348        // Place your code here
; 0000 0349 m1:
;PCODE: $00000337 VOL: 0
; 0000 034A 
; 0000 034B 
; 0000 034C 
; 0000 034D    while(work==0 && work_gps==0){};
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 034E 
; 0000 034F 
; 0000 0350 
; 0000 0351 
; 0000 0352    switch(work)
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 0353 
; 0000 0354 
; 0000 0355    {
; 0000 0356    case 1:
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0357    tim();
;PCODE: $00000348 VOL: 0
; 0000 0358       ++st;
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 0359    if(st==2)
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 035A    {
; 0000 035B    flag=1;
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 035C    while(flag==1){}
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 035D     w1_init();
;PCODE: $00000358 VOL: 0
; 0000 035E  w1_write(0xCC);
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 035F    w1_write(0x44);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0360 
; 0000 0361     adc_on;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0362     work=3;
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 0363 
; 0000 0364 
; 0000 0365             continue;
;PCODE: $00000361 VOL: 0
; 0000 0366 
; 0000 0367       }
; 0000 0368      if(st==4)
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 0369      {
; 0000 036A        st=0;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 036B         work=2;
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 036C        continue;
;PCODE: $0000036A VOL: 0
; 0000 036D        }
; 0000 036E     work=0;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 036F     break;
;PCODE: $0000036E VOL: 0
; 0000 0370 
; 0000 0371 
; 0000 0372     case 2:
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 0373 
; 0000 0374      flag=1;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0375    while(flag==1){}
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 0376   error = w1_init();
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0377 
; 0000 0378   if(error==1)
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0379   {
; 0000 037A  w1_write(0xCC);
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 037B  w1_write(0xbe);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 037C          temp_lsb=w1_read();
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 037D          temp_msb=w1_read();
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 037E          w1_read();
;PCODE: $00000388 VOL: 0
; 0000 037F          w1_read();
;PCODE: $00000389 VOL: 0
; 0000 0380          w1_read();
;PCODE: $0000038A VOL: 0
; 0000 0381          w1_read();
;PCODE: $0000038B VOL: 0
; 0000 0382          flag=1;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 0383    while(flag==1){}
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0384 
; 0000 0385          cnt_rem=w1_read();;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 0386          cnt_c=w1_read();
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 0387           w1_read();
;PCODE: $00000399 VOL: 0
; 0000 0388 
; 0000 0389           if (temp_msb>0)
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 038A 
; 0000 038B           temp_lsb = ~ temp_lsb;
;PCODE: $0000039D VOL: 0
; 0000 038C 
; 0000 038D           temp_lsb = temp_lsb >>1;
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 038E            copy =  temp_lsb;
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 038F            wcnt_rem =  cnt_rem;
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 0390            wcnt_c = cnt_c;
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0391        if(temp_msb==0)
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0392        {    copy = copy - 0.25;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 0393             copy+=(wcnt_c -wcnt_rem)/wcnt_c;
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 0394              }
; 0000 0395             else
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 0396              {
; 0000 0397               copy = copy + 1.25;
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 0398               copy-=(wcnt_c -wcnt_rem)/wcnt_c;
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0399               copy*=-1;
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 039A 
; 0000 039B            }
;PCODE: $000003CF VOL: 0
; 0000 039C 
; 0000 039D        copy*=10;
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 039E 
; 0000 039F 
; 0000 03A0   //     intf(lcd_buf,"t=%.1f", copy/10);
; 0000 03A1 
; 0000 03A2    ftoa(copy/10,1,lcd_buf);
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 03A3 
; 0000 03A4 
; 0000 03A5    //#asm("cli")
; 0000 03A6 
; 0000 03A7 
; 0000 03A8 
; 0000 03A9     //  lcd_puts("t=");
; 0000 03AA 
; 0000 03AB 
; 0000 03AC  if(copy >0)
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 03AD  {
; 0000 03AE    // strcpy( lcd_buf1, lcd_buf);
; 0000 03AF 
; 0000 03B0  for(t=9;t<255;t--)
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 03B1 
; 0000 03B2     lcd_buf[t+1]= lcd_buf[t];
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 03B5 lcd_buf[0]='+';
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 03B6 
; 0000 03B7       }
; 0000 03B8 
; 0000 03B9        flag=1;
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 03BA    while(flag==1){}
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 03BB 
; 0000 03BC      lcd_gotoxy(2,1);
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 03BD 
; 0000 03BE   lcd_puts(lcd_buf);
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 03BF 
; 0000 03C0   lcd_putchar(0xDF);
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 03C1   lcd_putchar(0x43);
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 03C2   lcd_putchar(0x20);
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 03C3    // lcd_puts("*C ");
; 0000 03C4 
; 0000 03C5         }
; 0000 03C6 
; 0000 03C7         else
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 03C8         {
; 0000 03C9 
; 0000 03CA    flag=1;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 03CB    while(flag==1){}
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 03CC           lcd_gotoxy(2,1);
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 03CD                      //+55.9*c
; 0000 03CE              lcd_puts("ERROR  ");
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 03CF 
; 0000 03D0                     }
;PCODE: $00000423 VOL: 0
; 0000 03D1     //  #asm("sei")
; 0000 03D2 
; 0000 03D3 
; 0000 03D4 
; 0000 03D5 
; 0000 03D6 
; 0000 03D7         if(es_gps > 0)
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 03D8         {
; 0000 03D9 
; 0000 03DA       if(st_po<3)
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 03DB      {
; 0000 03DC        ++st_po;
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 03DD 
; 0000 03DE 
; 0000 03DF            if(st_po==3)
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 03E0             {
; 0000 03E1             ++st_po;
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 03E2             flag=1;
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 03E3    while(flag==1){}
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 03E4 
; 0000 03E5             lcd_gotoxy(0,0);
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 03E6              lcd_puts("               ");
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 03E7 
; 0000 03E8                 lcd_gotoxy(0,0);
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 03E9           lcd_puts("N=   S=");
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 03EA 
; 0000 03EB 
; 0000 03EC              }
; 0000 03ED             }
;PCODE: $0000044A VOL: 0
; 0000 03EE       ++err;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 03EF 
; 0000 03F0         switch(err)
;PCODE: $00000450 VOL: 0
; 0000 03F1         {
; 0000 03F2 
; 0000 03F3           case 3:
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 03F4 
; 0000 03F5           es_gps =1;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 03F6 
; 0000 03F7 
; 0000 03F8 
; 0000 03F9         UCSRB &=~(1<<RXCIE);
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 03FA 
; 0000 03FB             soten_speed = 0;
;PCODE: $00000457 VOL: 0
; 0000 03FC             deset_speed= 0;
;PCODE: $00000458 VOL: 0
; 0000 03FD               ed_speed= 0;
;PCODE: $00000459 VOL: 0
; 0000 03FE 
; 0000 03FF              // #asm("cli")
; 0000 0400 
; 0000 0401               flag=1;
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0402    while(flag==1){}
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 0403               putchar('n');
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 0404              lcd_gotoxy(0,0);
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 0405          lcd_puts("                ");
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 0406              lcd_gotoxy(0,0);
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 0407           lcd_puts("  NO SIGNAL");
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 0408 
; 0000 0409         //  #asm("sei")
; 0000 040A     // zvuk();
; 0000 040B 
; 0000 040C                  break;
;PCODE: $00000473 VOL: 0
; 0000 040D 
; 0000 040E          case 5:
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 040F 
; 0000 0410            es_gps =0;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 0411            err = 0;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 0412            st_po=0;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 0413 
; 0000 0414               UCSRB|=(1<<RXCIE);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0415 
; 0000 0416           //       #asm("cli")
; 0000 0417 
; 0000 0418                 flag=1;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 0419    while(flag==1){}
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 041A                lcd_gotoxy(0,0);
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 041B           lcd_puts("                ");
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 041C           lcd_gotoxy(3,0);
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 041D 
; 0000 041E         lcd_puts(":");
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 041F 
; 0000 0420         lcd_gotoxy(10,0);
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0000 0421 
; 0000 0422         lcd_puts("S=");
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 0423 
; 0000 0424        //  #asm("sei")
; 0000 0425 
; 0000 0426 
; 0000 0427             break;
;PCODE: $0000049D VOL: 0
; 0000 0428        }
;PCODE: $0000049E VOL: 0
; 0000 0429          }
; 0000 042A 
; 0000 042B 
; 0000 042C 
; 0000 042D         adc_on;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 042E 
; 0000 042F 
; 0000 0430            work=3;
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0431 
; 0000 0432 
; 0000 0433             continue;
;PCODE: $000004A4 VOL: 0
; 0000 0434 
; 0000 0435 
; 0000 0436   case 3:
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 0437 
; 0000 0438    if(st_v<3)
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 0439      {
; 0000 043A       ++st_v;
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 043B        goto m3;
;PCODE: $000004B0 VOL: 0
; 0000 043C        }
; 0000 043D 
; 0000 043E    adc_dataw+=adc_data;
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0000 043F           if( cout_in<8)
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 0440                    adc_on;
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 0441             if (++cout_in==8)
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
; 0000 0442           {
; 0000 0443 
; 0000 0444            adc_off;
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 0445 
; 0000 0446          adc_dataw=adc_dataw>>5;
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 0447        // adc_dataw=adc_dataw>>2;
; 0000 0448             cout_in=0;
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
; 0000 0449 
; 0000 044A 
; 0000 044B              ftoa((float)adc_dataw/10,1,lcd_buf);
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 044C              flag=1;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
; 0000 044D    while(flag==1){}
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 044E 
; 0000 044F          lcd_gotoxy(12,1);
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 0450       lcd_puts(lcd_buf);
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 0451 
; 0000 0452           if(( adc_dataw <= min_u || adc_dataw >= max_u )&& alarm_u==0)
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 0453 
; 0000 0454           {
; 0000 0455         alarm_u=1;
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 0456               adc_datawi=adc_dataw;
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 0457                  putchar('b');
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
; 0000 0458 
; 0000 0459                        }
; 0000 045A 
; 0000 045B 
; 0000 045C         if(( adc_dataw > min_u && adc_dataw < max_u )&&  alarm_u==1)
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 045D 
; 0000 045E                {
; 0000 045F 
; 0000 0460                alarm_u=0;
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 0461 
; 0000 0462                   ftoa((float)adc_dataw/10,1,lcd_buf);
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 0463 
; 0000 0464           flag=1;
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 0465    while(flag==1){}
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 0466          lcd_gotoxy(12,1);
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
; 0000 0467            lcd_puts(lcd_buf);
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; 0000 0468 
; 0000 0469             }
; 0000 046A      /*
; 0000 046B       ++st_po;
; 0000 046C 
; 0000 046D           itoa(st_po,lcd_buf);
; 0000 046E            lcd_gotoxy(12,0);
; 0000 046F 
; 0000 0470                 lcd_puts(lcd_buf);
; 0000 0471          */
; 0000 0472     //   #asm("sei")
; 0000 0473 
; 0000 0474 
; 0000 0475 
; 0000 0476 
; 0000 0477          adc_datawi=adc_dataw;
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 0478         adc_dataw=0;
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 0479 
; 0000 047A 
; 0000 047B         }
; 0000 047C 
; 0000 047D 
; 0000 047E 
; 0000 047F      m3:
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
; 0000 0480        work=0;
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
; 0000 0481         break;
;PCODE: $0000052D VOL: 0
; 0000 0482   }
;PCODE: $0000052E VOL: 0
; 0000 0483 
; 0000 0484     if( work_gps==0) goto m1;
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 0485 
; 0000 0486        //GPS----------------------------------------------------------
; 0000 0487 
; 0000 0488        if ( work_gps==1)
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 0489        {
; 0000 048A   //  #asm("cli")
; 0000 048B 
; 0000 048C        for(i=0; i<rx_wr_index; i++)
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
; 0000 048D        {
; 0000 048E        if  (rx_buffer [i]=='$')
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
; 0000 048F        {
; 0000 0490        work_gps=2;
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0000 0491 
; 0000 0492         break;
;PCODE: $00000545 VOL: 0
; 0000 0493        }
; 0000 0494           }
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 0495              }
; 0000 0496 
; 0000 0497              if (work_gps==1)
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0000 0498              {
; 0000 0499          reset();
;PCODE: $0000054F VOL: 0
; 0000 049A               goto m1;
;PCODE: $00000550 VOL: 0
; 0000 049B 
; 0000 049C                  }
; 0000 049D 
; 0000 049E 
; 0000 049F        //switch(
; 0000 04A0 
; 0000 04A1        if (work_gps==2)
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
; 0000 04A2        {
; 0000 04A3        if(rx_buffer [i+3]=='R' && rx_buffer [i+4]=='M'
; 0000 04A4        && rx_buffer [i+5]=='C' )
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 04A5 
; 0000 04A6        work_gps=3;
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 04A7 
; 0000 04A8 
; 0000 04A9 
; 0000 04AA         if((rx_buffer [i+3]=='V') && (rx_buffer [i+4]=='T')
;PCODE: $00000570 VOL: 0
; 0000 04AB        && (rx_buffer [i+5]=='G'))
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 04AC 
; 0000 04AD        work_gps=5;
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 04AE 
; 0000 04AF 
; 0000 04B0 
; 0000 04B1 
; 0000 04B2 
; 0000 04B3         if(rx_buffer [i+3]=='G' && rx_buffer [i+4]=='S'
;PCODE: $0000058C VOL: 0
; 0000 04B4        && rx_buffer [i+5]=='V')// && es_gps == 0)
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 04B5 
; 0000 04B6          work_gps=10;
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 04B7 
; 0000 04B8 
; 0000 04B9 
; 0000 04BA          if(rx_buffer [i+3]=='G' && rx_buffer [i+4]=='G'
;PCODE: $000005A8 VOL: 0
; 0000 04BB        && rx_buffer [i+5]=='A' && st_po == 4)
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
; 0000 04BC 
; 0000 04BD         work_gps=9;
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 04BE 
; 0000 04BF 
; 0000 04C0 
; 0000 04C1       }
;PCODE: $000005C7 VOL: 0
; 0000 04C2 
; 0000 04C3 
; 0000 04C4          if (work_gps==2)
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
; 0000 04C5             {
; 0000 04C6          reset();
;PCODE: $000005CC VOL: 0
; 0000 04C7               goto m1;
;PCODE: $000005CD VOL: 0
; 0000 04C8 
; 0000 04C9                  }
; 0000 04CA 
; 0000 04CB 
; 0000 04CC 
; 0000 04CD 
; 0000 04CE 
; 0000 04CF 
; 0000 04D0 
; 0000 04D1 
; 0000 04D2      /*
; 0000 04D3         {
; 0000 04D4 
; 0000 04D5        for(i=0; i<rx_wr_index; i++)
; 0000 04D6 
; 0000 04D7      {
; 0000 04D8        if(rx_buffer [i]==',')
; 0000 04D9 
; 0000 04DA      {
; 0000 04DB      work_gps=4;break;
; 0000 04DC 
; 0000 04DD      }
; 0000 04DE        }
; 0000 04DF       }   */
; 0000 04E0 
; 0000 04E1 
; 0000 04E2 
; 0000 04E3 
; 0000 04E4           if (work_gps==3 && es_gps == 3 )
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
; 0000 04E5           {
; 0000 04E6                for(i=0; i<rx_wr_index; i++)
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 04E7 
; 0000 04E8      {
; 0000 04E9        if(rx_buffer [i]=='A')
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
; 0000 04EA 
; 0000 04EB      {
; 0000 04EC      work_gps=4;break;
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0000 04ED 
; 0000 04EE      }
; 0000 04EF        }
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
; 0000 04F0 
; 0000 04F1          if( work_gps==4)
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 04F2          {
; 0000 04F3           for(i=0; i<rx_wr_index; i++)
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
; 0000 04F4 
; 0000 04F5      {
; 0000 04F6        if(rx_buffer [i]==',') break;
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
; 0000 04F7 
; 0000 04F8           }
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
; 0000 04F9 
; 0000 04FA 
; 0000 04FB 
; 0000 04FC 
; 0000 04FD            sum_hours=((rx_buffer [i+1])-48)*10+(rx_buffer [i+2]-48);
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
; 0000 04FE 
; 0000 04FF            if  (sum_hours<21)
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0000 0500 
; 0000 0501             sum_hours=sum_hours+3;
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0000 0502 
; 0000 0503 
; 0000 0504                else
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
; 0000 0505         {
; 0000 0506 
; 0000 0507            switch (sum_hours)
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 0508             {
; 0000 0509             case 21: sum_hours=0; break;
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
; 0000 050A              case 22: sum_hours=1; break;
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 050B               case 23: sum_hours=2; break;
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
; 0000 050C 
; 0000 050D 
; 0000 050E               }
;PCODE: $0000062F VOL: 0
; 0000 050F            }
;PCODE: $00000630 VOL: 0
; 0000 0510 
; 0000 0511 
; 0000 0512             //  decet_Hours_clock=sum_hours/10;
; 0000 0513 
; 0000 0514             //  ed_hours_clock=sum_hours%10;
; 0000 0515 
; 0000 0516 
; 0000 0517           decet_min_clock=(rx_buffer [i+3]-48)*10 + rx_buffer [i+4]-48 ;
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 0518 
; 0000 0519          // ed_min_clock=rx_buffer [i+4]-48;
; 0000 051A 
; 0000 051B 
; 0000 051C 
; 0000 051D            decet_sek_clock=(rx_buffer [i+5]-48)*10 + rx_buffer [i+6]-48;
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0000 051E 
; 0000 051F 
; 0000 0520              rtc_set_time(sum_hours,decet_min_clock,decet_sek_clock);
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
; 0000 0521 
; 0000 0522 
; 0000 0523                    ++es_gps;
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
; 0000 0524                     st_s=10;
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
; 0000 0525                   // rtc_get_time(&h,&m,&s);
; 0000 0526 
; 0000 0527                //    time();
; 0000 0528              flag=1;
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 0529    while(flag==1){}
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
; 0000 052A 
; 0000 052B                    lcd_gotoxy(15,0);
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
; 0000 052C 
; 0000 052D                       lcd_puts("#");
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
; 0000 052E 
; 0000 052F 
; 0000 0530 
; 0000 0531 
; 0000 0532 
; 0000 0533          reset();
;PCODE: $0000066D VOL: 0
; 0000 0534               goto m1;
;PCODE: $0000066E VOL: 0
; 0000 0535 
; 0000 0536 
; 0000 0537 
; 0000 0538 
; 0000 0539 
; 0000 053A                  }
; 0000 053B             }
;PCODE: $0000066F VOL: 0
; 0000 053C 
; 0000 053D           if( work_gps==3)
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
; 0000 053E             {
; 0000 053F          reset();
;PCODE: $00000674 VOL: 0
; 0000 0540               goto m1;
;PCODE: $00000675 VOL: 0
; 0000 0541 
; 0000 0542                  }
; 0000 0543 
; 0000 0544 
; 0000 0545          if (work_gps==5)
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
; 0000 0546 
; 0000 0547           {
; 0000 0548 
; 0000 0549 
; 0000 054A 
; 0000 054B              for(i=0; i<rx_wr_index; i++)
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
; 0000 054C 
; 0000 054D             {
; 0000 054E 
; 0000 054F             if ( (rx_buffer [i]=='N')&&(rx_buffer [i+1]==','))
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
; 0000 0550            {
; 0000 0551 
; 0000 0552            err=0; work_gps=6;
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
; 0000 0553 
; 0000 0554            if(es_gps==0)
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
; 0000 0555                {
; 0000 0556                 es_gps =3;
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
; 0000 0557               itoa(tm,lcd_buf);
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
; 0000 0558              flag=1;
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
; 0000 0559    while(flag==1){}
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
; 0000 055A 
; 0000 055B            lcd_gotoxy(0,0);
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
; 0000 055C 
; 0000 055D 
; 0000 055E          lcd_puts("                ");
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
; 0000 055F             lcd_gotoxy(0,0);
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
; 0000 0560           lcd_puts("GPS_Ok ");
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
; 0000 0561 
; 0000 0562                   lcd_puts(lcd_buf);
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 0563            lcd_puts(":");
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
; 0000 0564             if(ts<10)
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
; 0000 0565            lcd_puts("0");
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
; 0000 0566 
; 0000 0567             itoa(ts,lcd_buf);
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
; 0000 0568                  lcd_puts(lcd_buf);
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
; 0000 0569 
; 0000 056A                   putchar('s');
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
; 0000 056B 
; 0000 056C                 ts=0;
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
; 0000 056D                 tm=0;
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
; 0000 056E                 kvadrat = 0;
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
; 0000 056F 
; 0000 0570                      }
; 0000 0571 
; 0000 0572            break;
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
; 0000 0573          }
; 0000 0574 
; 0000 0575 
; 0000 0576 
; 0000 0577 
; 0000 0578        }
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 0579 
; 0000 057A            }
; 0000 057B 
; 0000 057C          if (work_gps==5)
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 057D           {
; 0000 057E          reset();
;PCODE: $000006DD VOL: 0
; 0000 057F               goto m1;
;PCODE: $000006DE VOL: 0
; 0000 0580 
; 0000 0581                  }
; 0000 0582 
; 0000 0583 
; 0000 0584 
; 0000 0585 
; 0000 0586              if (work_gps==6)
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 0587           {
; 0000 0588 
; 0000 0589 
; 0000 058A 
; 0000 058B 
; 0000 058C 
; 0000 058D                 sum_hours=255;
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0000 058E 
; 0000 058F 
; 0000 0590 
; 0000 0591               for(i= i+2; i<rx_wr_index ; i++)
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
; 0000 0592               {
; 0000 0593                 sum_hours++;
;PCODE: $000006ED VOL: 0
; 0000 0594                if(rx_buffer [i]!=',')
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
; 0000 0595                {
; 0000 0596 
; 0000 0597              speed_array[sum_hours]= rx_buffer [i];
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
; 0000 0598 
; 0000 0599 
; 0000 059A 
; 0000 059B              }
; 0000 059C                  else
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
; 0000 059D                  break;
;PCODE: $000006FE VOL: 0
; 0000 059E 
; 0000 059F 
; 0000 05A0              }
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
; 0000 05A1 
; 0000 05A2 
; 0000 05A3 
; 0000 05A4             for(r=0; r<sum_hours; r++)
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
; 0000 05A5 
; 0000 05A6              if( speed_array[r]=='.')
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0000 05A7               {
; 0000 05A8 
; 0000 05A9           //   soten_speed =5;                         //     unsigned char ed_speed;
; 0000 05AA               break;
;PCODE: $00000714 VOL: 0
; 0000 05AB                }
; 0000 05AC             //    i=2;                                             //   unsigned char deset_speed;
; 0000 05AD                                                              // unsigned char soten_speed;
; 0000 05AE             switch (r)
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
; 0000 05AF             {
; 0000 05B0              case 1: ed_speed = speed_array[0]-48;
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
; 0000 05B1 
; 0000 05B2               soten_speed = deset_speed = 0;
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
; 0000 05B3                   break;
;PCODE: $00000726 VOL: 0
; 0000 05B4 
; 0000 05B5               case 2: ed_speed = speed_array[1]-48;
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
; 0000 05B6                    deset_speed = speed_array[0]-48;
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
; 0000 05B7 
; 0000 05B8               soten_speed =  0;
;PCODE: $00000731 VOL: 0
; 0000 05B9                   break;
;PCODE: $00000732 VOL: 0
; 0000 05BA 
; 0000 05BB               case 3: ed_speed = speed_array[2]-48;
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
; 0000 05BC                    deset_speed = speed_array[1]-48;
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
; 0000 05BD 
; 0000 05BE               soten_speed = speed_array[0]-48;
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
; 0000 05BF                   break;
;PCODE: $00000741 VOL: 0
; 0000 05C0 
; 0000 05C1              }
;PCODE: $00000742 VOL: 0
; 0000 05C2 
; 0000 05C3               for(r=0; r<10; r++)
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
; 0000 05C4                speed_array[r]=0;
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
; 0000 05E5 reset();
;PCODE: $00000758 VOL: 0
; 0000 05E6               goto m1;
;PCODE: $00000759 VOL: 0
; 0000 05E7 
; 0000 05E8 
; 0000 05E9 
; 0000 05EA 
; 0000 05EB        }
; 0000 05EC 
; 0000 05ED 
; 0000 05EE 
; 0000 05EF 
; 0000 05F0 
; 0000 05F1 
; 0000 05F2 
; 0000 05F3 
; 0000 05F4 
; 0000 05F5 
; 0000 05F6           if( work_gps==9 )
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
; 0000 05F7           {
; 0000 05F8 
; 0000 05F9              sum_hours=0;
;PCODE: $0000075E VOL: 0
; 0000 05FA         //  ed_sek_clock=rx_buffer [i+6]-48;
; 0000 05FB 
; 0000 05FC             for(i=0; i<rx_wr_index; i++)
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
; 0000 05FD        {
; 0000 05FE        if  (rx_buffer [i]==',')
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
; 0000 05FF        {
; 0000 0600        if(++sum_hours==7)
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
; 0000 0601        {
; 0000 0602                       //n sputnik
; 0000 0603 
; 0000 0604         //  decet_sek_clock=(rx_buffer [i+1]-48)*10 + rx_buffer [i+2]-48;
; 0000 0605 
; 0000 0606 
; 0000 0607        //   ed_sek_clock=
; 0000 0608     //   itoa(decet_sek_clock ,lcd_buf);
; 0000 0609          flag=1;
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
; 0000 060A        while(flag==1){}
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
; 0000 060B           lcd_gotoxy(2,0);
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
; 0000 060C 
; 0000 060D           lcd_d ();
;PCODE: $0000077D VOL: 0
; 0000 060E 
; 0000 060F          //  #asm("sei")
; 0000 0610 
; 0000 0611            break;
;PCODE: $0000077E VOL: 0
; 0000 0612 
; 0000 0613             }
; 0000 0614             }
;PCODE: $0000077F VOL: 0
; 0000 0615            }
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
; 0000 0616 
; 0000 0617 
; 0000 0618         sum_hours=0;
;PCODE: $00000785 VOL: 0
; 0000 0619         //  ed_sek_clock=rx_buffer [i+6]-48;
; 0000 061A 
; 0000 061B             for(i=0; i<rx_wr_index; i++)
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
; 0000 061C        {
; 0000 061D        if(rx_buffer [i]==',')
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
; 0000 061E        {
; 0000 061F        if(++sum_hours==9)
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
; 0000 0620        {
; 0000 0621                       //METR
; 0000 0622 
; 0000 0623           metr=((rx_buffer [i+1]-48)*100) + ((rx_buffer [i+2]-48)*10)
; 0000 0624 
; 0000 0625           +( rx_buffer [i+3]-48);
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
; 0000 0626 
; 0000 0627 
; 0000 0628              itoa(metr ,lcd_buf);
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
; 0000 0629 
; 0000 062A               flag=1;
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
; 0000 062B           while(flag==1){}
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
; 0000 062C 
; 0000 062D           lcd_gotoxy(10,0);
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
; 0000 062E 
; 0000 062F           lcd_puts(lcd_buf);
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
; 0000 0630 
; 0000 0631                  lcd_puts("m");
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
; 0000 0632 
; 0000 0633       if(metr<=999)
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
; 0000 0634 
; 0000 0635               lcd_putchar(0X20);
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
; 0000 0636 
; 0000 0637             //  #asm("sei")
; 0000 0638 
; 0000 0639                break;
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
; 0000 063A                }
; 0000 063B                }
;PCODE: $000007D2 VOL: 0
; 0000 063C              }
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
; 0000 063D 
; 0000 063E 
; 0000 063F 
; 0000 0640          reset();
;PCODE: $000007D8 VOL: 0
; 0000 0641               goto m1;
;PCODE: $000007D9 VOL: 0
; 0000 0642 
; 0000 0643 
; 0000 0644 
; 0000 0645 
; 0000 0646 
; 0000 0647             }
; 0000 0648 
; 0000 0649 
; 0000 064A          if( work_gps==10)
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
; 0000 064B           {
; 0000 064C 
; 0000 064D 
; 0000 064E                sum_hours=0;
;PCODE: $000007DE VOL: 0
; 0000 064F         //  ed_sek_clock=rx_buffer [i+6]-48;
; 0000 0650 
; 0000 0651             for(i=0; i<rx_wr_index; i++)
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
; 0000 0652        {
; 0000 0653        if  (rx_buffer [i]==',')
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
; 0000 0654        {
; 0000 0655        if(++sum_hours==3)
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
; 0000 0656        {
; 0000 0657                       //S sputnik
; 0000 0658 
; 0000 0659         //  decet_sek_clock=(rx_buffer [i+1]-48)*10 + rx_buffer [i+2]-48;
; 0000 065A 
; 0000 065B     //   itoa(decet_sek_clock ,lcd_buf);
; 0000 065C 
; 0000 065D               flag=1;
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
; 0000 065E        while(flag==1){}
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
; 0000 065F 
; 0000 0660        if(es_gps==0)
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
; 0000 0661        {
; 0000 0662          lcd_gotoxy(12,0);
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
; 0000 0663             lcd_d ();
;PCODE: $00000800 VOL: 0
; 0000 0664             }
; 0000 0665         if(st_po==4)
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
; 0000 0666         {
; 0000 0667           lcd_gotoxy(7,0);
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0000 0668             lcd_d ();
;PCODE: $00000809 VOL: 0
; 0000 0669               }
; 0000 066A           //  #asm("sei")
; 0000 066B 
; 0000 066C          reset();
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
; 0000 066D               goto m1;
;PCODE: $0000080C VOL: 0
; 0000 066E 
; 0000 066F 
; 0000 0670 
; 0000 0671            break;
;PCODE: $0000080D VOL: 0
; 0000 0672 
; 0000 0673             }
; 0000 0674 
; 0000 0675             }
;PCODE: $0000080E VOL: 0
; 0000 0676           }
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
; 0000 0677 
; 0000 0678         }
; 0000 0679           reset ();
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
; 0000 067A 
; 0000 067B       }
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
; 0000 067C }
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0

	.DSEG
_0x5F:
	.BYTE 0xD3
